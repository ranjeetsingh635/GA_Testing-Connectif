name: Deploy Next.js with Zero Downtime

on:
  push:
    branches:
      - main  

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Determine Active Container
        id: active
        run: |
          ACTIVE=$(docker ps --format "{{.Names}}" | grep -E 'app_blue|app_green' | head -n 1)
          if [ "$ACTIVE" == "app_blue" ]; then
            echo "TARGET=app_green" >> $GITHUB_ENV
            echo "OLD=app_blue" >> $GITHUB_ENV
          else
            echo "TARGET=app_blue" >> $GITHUB_ENV
            echo "OLD=app_green" >> $GITHUB_ENV
          fi
          echo "Deploying to ${{ env.TARGET }} while keeping ${{ env.OLD }} running."

      - name: Build and Start New Container
        run: |
          echo "Building new container: ${{ env.TARGET }}"
          docker compose build --no-cache ${{ env.TARGET }}
          docker compose up -d --force-recreate ${{ env.TARGET }}
          echo "Started new container: ${{ env.TARGET }}"

      - name: Wait for New Container to be Ready
        run: sleep 20 

      - name: Check New Deployment Health
        run: |
          for i in {1..30}; do
            STATUS=$(curl -o /dev/null -s -w "%{http_code}" http://localhost:4001 || echo "000")
            if [ "$STATUS" -eq 200 ]; then
              echo "Deployment successful!"
              exit 0
            fi
            echo "Waiting for service to start... ($i/30)"
            sleep 5
          done
          echo "Deployment failed!"
          exit 1

      - name: Ensure Nginx Reverse Proxy is Running
        run: |
          echo "Checking if nginx_reverse_proxy container exists..."
          if docker ps -a --format "{{.Names}}" | grep -q "nginx_reverse_proxy"; then
            echo "Nginx reverse proxy found, restarting..."
            docker restart nginx_reverse_proxy
          else
            echo "Nginx reverse proxy not found, pulling and starting..."
            docker pull nginx:latest
            docker run -d --name nginx_reverse_proxy -p 80:80 nginx
          fi


      - name: Stop and Remove Old Container and Image
        run: |
          echo "Stopping old container: ${{ env.OLD }}"
          docker stop ${{ env.OLD }} && docker rm ${{ env.OLD }}
          echo "Removing old image..."
          IMAGE_ID=$(docker images -q $(docker inspect --format='{{.Config.Image}}' ${{ env.OLD }}) || echo "")
          if [ -n "$IMAGE_ID" ]; then
            docker rmi -f "$IMAGE_ID"
            echo "Old image removed: $IMAGE_ID"
          else
            echo "No image found for old container."
          fi

      - name: Remove Unused Docker Images
        run: docker image prune -f
