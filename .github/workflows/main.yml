name: Zero-Downtime Deployment

on:
  push:
    branches:
      - main  

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Determine Active Container
        id: active
        run: |
          ACTIVE=$(docker ps --format "{{.Names}}" | grep -E 'app_blue|app_green' | head -n 1)
          if [ "$ACTIVE" == "app_blue" ]; then
            echo "TARGET=app_green" >> $GITHUB_ENV
            echo "OLD=app_blue" >> $GITHUB_ENV
          else
            echo "TARGET=app_blue" >> $GITHUB_ENV
            echo "OLD=app_green" >> $GITHUB_ENV
          fi
          echo "Deploying to ${{ env.TARGET }} while keeping ${{ env.OLD }} running."

      - name: Pull Latest Docker Images
        run: |
          docker compose pull ${{ env.TARGET }}

      - name: Build and Start New Container
        run: |
          echo "Building new container: ${{ env.TARGET }}"
          docker compose build ${{ env.TARGET }}
          docker compose up -d --force-recreate ${{ env.TARGET }}
          echo "Started new container: ${{ env.TARGET }}"

      - name: Wait for New Container to be Ready
        run: |
          max_attempts=30
          attempt=0
          while [ $attempt -lt $max_attempts ]; do
            if docker exec ${{ env.TARGET }} curl -f http://localhost:4001 > /dev/null 2>&1; then
              echo "New container is ready!"
              break
            fi
            echo "Waiting for new container to be ready... (Attempt $((attempt+1))/$max_attempts)"
            sleep 10
            attempt=$((attempt+1))
          done

          if [ $attempt -eq $max_attempts ]; then
            echo "New container failed to become ready"
            exit 1
          fi

      - name: Update Nginx Configuration
        run: |
          # Backup existing Nginx configuration
          cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.backup

          # Update Nginx configuration to route to new container
          sed -i "s/server ${{ env.OLD }}:4001/server ${{ env.TARGET }}:4001/g" /etc/nginx/nginx.conf

          # Test Nginx configuration
          nginx -t

          # Reload Nginx to apply new configuration
          systemctl reload nginx

      - name: Clean Up Old Resources
        run: |
          # Remove old container
          if docker ps -a | grep -q "${{ env.OLD }}"; then
            docker stop ${{ env.OLD }}
            docker rm ${{ env.OLD }}
          fi

          # Remove old images
          docker images | grep "nextjs_app" | grep -v "${{ env.TARGET }}" | awk '{print $3}' | xargs -r docker rmi -f

      - name: Prune Docker Resources
        run: |
          docker system prune -af --filter "label!=keep"

      - name: Send Deployment Notification
        if: success()
        run: |
          echo "Deployment to ${{ env.TARGET }} completed successfully on test.mobilecoderz.agency"
