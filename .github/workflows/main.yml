name: Zero-Downtime Deployment

on:
  push:
    branches:
      - main  

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Determine Active Container
        id: active
        run: |
          ACTIVE=$(docker ps --format "{{.Names}}" | grep -E 'app_blue|app_green' | head -n 1)
          if [ "$ACTIVE" == "app_blue" ]; then
            echo "TARGET=app_green" >> $GITHUB_ENV
            echo "OLD=app_blue" >> $GITHUB_ENV
          else
            echo "TARGET=app_blue" >> $GITHUB_ENV
            echo "OLD=app_green" >> $GITHUB_ENV
          fi
          echo "Deploying to ${{ env.TARGET }} while keeping ${{ env.OLD }} running."

      - name: Build and Start New Container
        run: |
          docker compose build --no-cache ${{ env.TARGET }}
          docker compose up -d --force-recreate ${{ env.TARGET }}

      - name: Wait for New Container to be Ready
        run: |
          max_attempts=30
          attempt=0
          while [ $attempt -lt $max_attempts ]; do
            if docker exec ${{ env.TARGET }} curl -f http://localhost:4001 > /dev/null 2>&1; then
              echo "New container is ready!"
              break
            fi
            echo "Waiting for new container to be ready... (Attempt $((attempt+1))/$max_attempts)"
            sleep 10
            attempt=$((attempt+1))
          done

          if [ $attempt -eq $max_attempts ]; then
            echo "New container failed to become ready"
            exit 1
          fi

      - name: Restart Nginx
        run: docker restart nginx_reverse_proxy

      - name: Clean Up Old Resources
        run: |
          docker stop ${{ env.OLD }} || true
          docker rm ${{ env.OLD }} || true
          docker rmi nextjs_app:${{ env.OLD == 'app_blue' && 'blue' || 'green' }} || true

      - name: Prune Docker Resources
        run: docker system prune -af --filter "label!=keep"
